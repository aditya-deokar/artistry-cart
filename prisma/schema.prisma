generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model images {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  file_id String
  url     String
}

model users {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String  @unique
  password String?
  avatar   Json? // Use Json type for consistency: { url, file_id }
  role     String  @default("USER") // "USER" or "SELLER" or "ADMIN"

  // Relations
  orders      orders[]
  addresses   addresses[]
  shopReviews shopReviews[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model addresses {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  isDefault    Boolean @default(false)

  // Relation to User
  userId String @db.ObjectId
  user   users  @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

// --- NEW ORDERS & ORDER_ITEMS MODELS ---
model orders {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  totalAmount       Float
  status            String // e.g., "PENDING", "SHIPPED", "DELIVERED", "CANCELLED"
  shippingAddressId String? // Store a snapshot of the address at time of order
  couponCode        String?
  discountAmount    Float?
  deliveryStatus    String @default("Ordered")

  // Relation to User
  userId String @db.ObjectId
  user   users  @relation(fields: [userId], references: [id])

  shopId String @db.ObjectId
  shops  shops  @relation(fields: [shopId], references: [id])

  // Relation to OrderItems
  items OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model OrderItem {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  quantity        Int
  price           Float // Price per item at the time of purchase
  selectedOptions Json?
  // Relation to Order
  orderId         String @db.ObjectId
  order           orders @relation(fields: [orderId], references: [id])

  // Relation to Product
  productId String   @db.ObjectId
  product   products @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model shopReviews {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  userId  String  @db.ObjectId
  rating  Float
  reviews String?
  shopsId String? @db.ObjectId

  shops shops? @relation(fields: [shopsId], references: [id])
  user  users  @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model shops {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  slug          String        @unique
  bio           String?
  category      String
  avatar        Json?
  coverBanner   String?
  address       String
  opening_hours String?
  website       String?
  socialLinks   Json[]
  ratings       Float         @default(0)
  reviews       shopReviews[]
  sellerId      String        @unique @db.ObjectId

  sellers sellers @relation(fields: [sellerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products products[]
  orders   orders[]
}

model sellers {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String   @unique
  phone_number String
  country      String
  password     String?
  stripeId     String?
  shop         shops?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model site_config {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  categories    String[]
  subCategories Json
}

model discount_codes {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  publicName    String
  discountType  String
  discountValue Float
  discountCode  String @unique
  sellerId      String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum productStatus {
  Active
  Pending
  Draft
}

model products {
  id                    String        @id @default(auto()) @map("_id") @db.ObjectId
  title                 String
  description           String
  detailed_description  String
  warranty              String?
  custom_specifications Json?
  slug                  String        @unique
  tags                  String[]
  cash_on_delivery      Boolean?
  brand                 String?
  video_url             String?
  category              String
  subCategory           String
  colors                String[]
  sizes                 String[]
  discountCodes         String        @db.ObjectId
  stock                 Int
  sale_price            Float?
  regular_price         Float
  ratings               Float         @default(5)
  isDeleted             Boolean?      @default(false)
  customProperties      Json
  images                Json[]
  status                productStatus @default(Active)
  totalSales            Int?

  isEvent       Boolean?
  starting_date DateTime?
  ending_date   DateTime?

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  shopId String @db.ObjectId
  Shop   shops  @relation(fields: [shopId], references: [id])

  orderItems OrderItem[]
}

model banners {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String // e.g., "Summer Art Fair 2025"
  description String? // e.g., "Get 20% off all landscape paintings"
  imageUrl    String // The URL for the banner image
  linkUrl     String // The URL the banner links to (e.g., /search?q=landscapes)
  isActive    Boolean  @default(true)
  startDate   DateTime
  endDate     DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model productAnalytics {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  productId    String   @unique
  shopId       String
  views        Int      @default(0)
  cartAdds     Int      @default(0)
  wishlistAdds Int      @default(0)
  purchases    Int      @default(0)
  lastViewedAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model shopAnalytics {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  totalVisitors Int      @default(0)
  countryStats  Json?
  cityStats     Json?
  deviceStats   Json?
  lastVisitedAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model uniqueShopVisitor {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  shopId    String   @db.ObjectId
  userId    String   @db.ObjectId
  visitedAt DateTime @default(now())

  @@unique([shopId, userId])
}
