generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model images {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  file_id String
  url     String
}

model users {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String  @unique
  password String?
  avatar   Json? // Use Json type for consistency: { url, file_id }
  role     String  @default("USER") // "USER" or "SELLER" or "ADMIN"

  // Relations
  orders         orders[]
  addresses      addresses[]
  shopReviews    shopReviews[]
  notifications  Notification[]
  analytics      UserAnalytics?
  discountUsage  discount_usage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model addresses {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  isDefault    Boolean @default(false)

  // Relation to User
  userId String @db.ObjectId
  user   users  @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model orders {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  totalAmount       Float
  status            String // e.g., "PENDING", "SHIPPED", "DELIVERED", "CANCELLED"
  shippingAddressId String? // Store a snapshot of the address at time of order
  couponCode        String?
  discountAmount    Float?
  deliveryStatus    String @default("Ordered")

  // Relation to User
  userId String @db.ObjectId
  user   users  @relation(fields: [userId], references: [id])

  shopId String @db.ObjectId
  shops  shops  @relation(fields: [shopId], references: [id])

  // Relation to OrderItems
  items OrderItem[]

  discountUsage discount_usage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model OrderItem {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  quantity        Int
  price           Float // Price per item at the time of purchase
  originalPrice   Float? // Original price before any discounts
  discountAmount  Float? // Discount applied per item
  selectedOptions Json?

  // Relation to Order
  orderId String @db.ObjectId
  order   orders @relation(fields: [orderId], references: [id])

  // Relation to Product
  productId String   @db.ObjectId
  product   products @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model shopReviews {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  userId  String  @db.ObjectId
  rating  Float
  reviews String?
  shopsId String? @db.ObjectId

  shops shops? @relation(fields: [shopsId], references: [id])
  user  users  @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model shops {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  slug          String        @unique
  bio           String?
  category      String
  avatar        Json?
  coverBanner   String?
  address       String
  opening_hours String?
  website       String?
  socialLinks   Json[]
  ratings       Float         @default(0)
  reviews       shopReviews[]
  sellerId      String        @unique @db.ObjectId

  sellers sellers @relation(fields: [sellerId], references: [id])

  events        events[]
  discountCodes discount_codes[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products products[]
  orders   orders[]
}

model sellers {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String   @unique
  phone_number String
  country      String
  password     String?
  stripeId     String?
  shop         shops?

  events        events[]
  discountCodes discount_codes[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model site_config {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  categories    String[]
  subCategories Json
}

enum productStatus {
  Active
  Pending
  Draft
}

// Enhanced Products model with pricing support
model products {
  id                    String        @id @default(auto()) @map("_id") @db.ObjectId
  title                 String
  description           String
  detailed_description  String
  warranty              String?
  custom_specifications Json?
  slug                  String        @unique
  tags                  String[]
  cash_on_delivery      Boolean?
  brand                 String?
  video_url             String?
  category              String
  subCategory           String
  colors                String[]
  sizes                 String[]
  discountCodes         String?        @db.ObjectId
  stock                 Int
  
  // Enhanced pricing fields
  sale_price            Float?        // Non-event sale price
  regular_price         Float         // Base price (never changes)
  current_price         Float         // Cached current effective price
  is_on_discount        Boolean       @default(false) // Cache for quick queries
  
  ratings               Float         @default(5)
  isDeleted             Boolean?      @default(false)
  customProperties      Json
  images                Json[]
  status                productStatus @default(Active)
  totalSales            Int?

  // Event relation (simplified)
  isEvent       Boolean?
  starting_date DateTime?
  ending_date   DateTime?

  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shopId String @db.ObjectId
  Shop   shops  @relation(fields: [shopId], references: [id])

  eventId String? @db.ObjectId
  event   events? @relation(fields: [eventId], references: [id])

  // Enhanced relations
  orderItems           OrderItem[]
  priceHistory         ProductPricing[]
  eventProductDiscounts EventProductDiscount[]

  @@index([current_price])
  @@index([is_on_discount])
  @@index([eventId])
}

// NEW: Product Pricing History Model
model ProductPricing {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  productId        String   @db.ObjectId
  product          products @relation(fields: [productId], references: [id])
  
  // Pricing details
  basePrice        Float    // Original price at time of pricing
  discountedPrice  Float?   // Final price after discount
  discountAmount   Float?   // Absolute discount amount applied
  discountPercent  Float?   // Percentage discount applied
  
  // Discount source tracking
  discountSource   String?  // "EVENT", "PRODUCT_SALE", "CATEGORY", "MANUAL", "BULK"
  sourceId         String?  @db.ObjectId  // EventId, CategoryId, etc.
  sourceName       String?  // For display purposes ("Summer Sale 2025")
  
  // Validity period
  validFrom        DateTime
  validUntil       DateTime?
  isActive         Boolean  @default(true)
  
  // Metadata
  createdBy        String?  @db.ObjectId  // SellerId who set this price
  reason           String?  // "Event pricing", "Clearance", "Flash sale", etc.
  notes            String?  // Additional notes
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@index([productId])
  @@index([validFrom, validUntil])
  @@index([isActive])
  @@index([discountSource])
}

// Enhanced Events model
model events {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  description      String
  banner_image     Json?    // { url, file_id }
  event_type       String   // "FLASH_SALE", "SEASONAL", "CLEARANCE", "NEW_ARRIVAL"
  
  // Enhanced discount fields
  discount_percent Float?   // Overall event discount percentage
  discount_type    String?  // "PERCENTAGE", "FIXED_AMOUNT", "TIERED"
  discount_value   Float?   // The discount value
  max_discount     Float?   // Maximum discount cap for percentage discounts
  min_order_value  Float?   // Minimum order value to qualify for event discount
  
  starting_date    DateTime
  ending_date      DateTime
  is_active        Boolean  @default(true)
  
  // Seller relation
  sellerId         String   @db.ObjectId
  seller           sellers  @relation(fields: [sellerId], references: [id])
  
  // Shop relation
  shopId           String   @db.ObjectId
  shop             shops    @relation(fields: [shopId], references: [id])
  
  // Products in this event
  products         products[]
  
  // NEW: Product-specific discounts within this event
  productDiscounts EventProductDiscount[]
  
  // Analytics
  views            Int      @default(0)
  clicks           Int      @default(0)
  conversions      Int      @default(0) // Track successful purchases
  totalRevenue     Float    @default(0) // Track revenue generated
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@index([sellerId])
  @@index([shopId])
  @@index([starting_date, ending_date])
  @@index([is_active])
  @@index([event_type])
}

// NEW: Event Product Specific Discounts Model
model EventProductDiscount {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  eventId          String   @db.ObjectId
  event            events   @relation(fields: [eventId], references: [id])
  productId        String   @db.ObjectId
  product          products @relation(fields: [productId], references: [id])
  
  // Discount details
  discountType     String   // "PERCENTAGE", "FIXED_AMOUNT", "SPECIAL_PRICE", "BUY_X_GET_Y"
  discountValue    Float    // Percentage or fixed amount
  maxDiscount      Float?   // Cap for percentage discounts
  
  // Special pricing
  specialPrice     Float?   // Override price for this product in this event
  
  // Conditions
  minQuantity      Int?     // Minimum quantity to get discount
  maxQuantity      Int?     // Maximum quantity eligible for discount
  
  // Metadata
  priority         Int      @default(1) // For handling multiple discounts
  isActive         Boolean  @default(true)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@unique([eventId, productId])
  @@index([eventId])
  @@index([productId])
  @@index([isActive])
}

model banners {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String // e.g., "Summer Art Fair 2025"
  description String? // e.g., "Get 20% off all landscape paintings"
  imageUrl    String // The URL for the banner image
  linkUrl     String // The URL the banner links to (e.g., /search?q=landscapes)
  isActive    Boolean  @default(true)
  startDate   DateTime
  endDate     DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model productAnalytics {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  productId    String   @unique
  shopId       String
  views        Int      @default(0)
  cartAdds     Int      @default(0)
  wishlistAdds Int      @default(0)
  purchases    Int      @default(0)
  lastViewedAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model shopAnalytics {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  totalVisitors Int      @default(0)
  countryStats  Json?
  cityStats     Json?
  deviceStats   Json?
  lastVisitedAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model uniqueShopVisitor {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  shopId    String   @db.ObjectId
  userId    String   @db.ObjectId
  visitedAt DateTime @default(now())

  @@unique([shopId, userId])
}

model UserAnalytics {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // Establishes the one-to-one relationship with a User
  userId      String   @unique @db.ObjectId
  user        users     @relation(fields: [userId], references: [id])

  lastVisited DateTime

  // The Json type is perfectly suited for MongoDB's flexible schema
  actions     Json[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  message       String
  isRead        Boolean   @default(false)
  redirect_link String?

  // The ID of the user who triggered the notification (e.g., the buyer)
  createrId     String    @db.ObjectId
  user          users      @relation(fields: [createrId], references: [id])

  // The ID of the entity receiving the notification (can be a seller's user ID or "admin")
  recieverId    String

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model discount_codes {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  publicName            String
  description           String?
  discountType          String   // "PERCENTAGE", "FIXED_AMOUNT", "FREE_SHIPPING"
  discountValue         Float
  discountCode          String   @unique
  
  // Usage restrictions
  minimumOrderAmount    Float?
  maximumDiscountAmount Float?   // For percentage discounts
  usageLimit            Int?     // Total usage limit
  usageLimitPerUser     Int?     // Per user usage limit
  currentUsageCount     Int      @default(0)
  
  // Validity
  isActive              Boolean  @default(true)
  validFrom             DateTime @default(now())
  validUntil            DateTime?
  
  // Applicability
  applicableToAll       Boolean  @default(true)
  applicableCategories  String[] // Categories this code applies to
  applicableProducts    String[] @db.ObjectId // Specific products
  excludedProducts      String[] @db.ObjectId // Excluded products
  
  // Seller relation
  sellerId              String   @db.ObjectId
  seller                sellers  @relation(fields: [sellerId], references: [id])
  
  // Shop relation
  shopId                String   @db.ObjectId
  shop                  shops    @relation(fields: [shopId], references: [id])
  
  // Usage tracking
  usageHistory          discount_usage[]
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([sellerId])
  @@index([shopId])
  @@index([validFrom, validUntil])
}

// Track discount code usage
model discount_usage {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  
  discountCodeId   String         @db.ObjectId
  discountCode     discount_codes @relation(fields: [discountCodeId], references: [id])
  
  userId           String         @db.ObjectId
  user             users          @relation(fields: [userId], references: [id])
  
  orderId          String?        @db.ObjectId
  order            orders?        @relation(fields: [orderId], references: [id])
  
  discountAmount   Float          // Amount discounted
  
  usedAt           DateTime       @default(now())
  
  @@index([discountCodeId])
  @@index([userId])
}
