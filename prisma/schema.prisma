generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model images {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  file_id   String
  url       String
  userId    String?   @unique @db.ObjectId
  users     users?    @relation(fields: [userId], references: [id])
}



model users {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String?
  following String[]

  avatar      images?
  shopReviews shopReviews[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model shopReviews {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  userId  String  @db.ObjectId
  rating  Float
  reviews String?
  shopsId String? @db.ObjectId

  shops shops? @relation(fields: [shopsId], references: [id])
  user  users  @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model shops {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  slug          String        @unique 
  bio           String?
  category      String
  avatar        Json?
  coverBanner   String?
  address       String
  opening_hours String?
  website       String?
  socialLinks   Json[]
  ratings       Float         @default(0)
  reviews       shopReviews[]
  sellerId      String        @unique @db.ObjectId

  sellers sellers @relation(fields: [sellerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products products[]
}

model sellers {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String   @unique
  phone_number String
  country      String
  password     String?
  stripeId     String?
  shop         shops?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model site_config {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  categories    String[]
  subCategories Json
}

model discount_codes {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  publicName    String
  discountType  String
  discountValue Float
  discountCode  String @unique
  sellerId      String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum productStatus {
  Active
  Pending
  Draft
}

model products {
  id                    String        @id @default(auto()) @map("_id") @db.ObjectId
  title                 String
  description           String
  detailed_description  String
  warranty              String?
  custom_specifications Json?
  slug                  String        @unique
  tags                  String[]
  cash_on_delivery      Boolean?
  brand                 String?
  video_url             String?
  category              String
  subCategory           String
  colors                String[]
  sizes                 String[]
  discountCodes         String      @db.ObjectId
  stock                 Int
  sale_price            Float
  regular_price         Float
  ratings               Float         @default(5)
  isDeleted             Boolean?      @default(false)
  customProperties      Json
  images                Json[]
  status                productStatus @default(Active)
  totalSales            Int?
  
  isEvent       Boolean?
  starting_date DateTime?
  ending_date   DateTime?

  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shopId String @db.ObjectId
  Shop   shops  @relation(fields: [shopId], references: [id])
}
